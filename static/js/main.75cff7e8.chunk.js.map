{"version":3,"sources":["components/Twitter.js","components/Github.js","App.js","serviceWorker.js","index.js"],"names":["Twitter","sourceType","screenName","options","height","Github","useState","repos","setRepos","useEffect","fetch","then","resp","json","data","mappedRepos","map","repo","fork","console","log","className","href","html_url","name","description","language","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAaeA,EAVC,WACd,OACE,kBAAC,IAAD,CACEC,WAAW,UACXC,WAAW,cACXC,QAAS,CAAEC,OAAQ,Q,OC0BVC,EAhCA,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAEnBC,qBAAU,WACRC,MAAM,+DACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIN,EAASM,QACxB,CAAC,IACJ,IAAMC,EAAcR,EAAMS,KAAI,SAAAC,GAC5B,IAAKA,EAAKC,KAER,OADAC,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,iBACb,uBAAGC,KAAML,EAAKM,SAAUF,UAAU,YAC/BJ,EAAKO,MAER,yBAAKH,UAAU,mBAAmBJ,EAAKQ,aACvC,6BACE,0BAAMJ,UAAWJ,EAAKS,WACrBT,EAAKS,cAMhB,OACE,6BACE,yBAAKL,UAAU,aACdN,I,MCbQY,MAXf,WACE,OACE,yBAAKN,UAAU,OACb,4CACA,uDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.75cff7e8.chunk.js","sourcesContent":["import React from \"react\";\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\nlet id = 800561378482212864;\nconst Twitter = () => {\n  return (\n    <TwitterTimelineEmbed\n      sourceType=\"profile\"\n      screenName=\"yoseflehrer\"\n      options={{ height: 400 }}\n    />\n  );\n};\n\nexport default Twitter;\n","import React, { useEffect, useState } from \"react\";\n\nconst Github = () => {\n  const [repos, setRepos] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/YosefLehrer/repos?sort=created\")\n      .then(resp => resp.json())\n      .then(data => setRepos(data));\n  }, [1]);\n  const mappedRepos = repos.map(repo => {\n    if (!repo.fork) {\n      console.log(repo);\n      return (\n        <div className=\"repoContainer\">\n          <a href={repo.html_url} className=\"repoName\">\n            {repo.name}\n          </a>\n          <div className=\"repoDescription\">{repo.description}</div>\n          <div>\n            <span className={repo.language}></span>\n            {repo.language}\n          </div>\n        </div>\n      );\n    }\n  });\n  return (\n    <div>\n      <div className=\"greyLine\"></div>\n      {mappedRepos}\n    </div>\n  );\n};\n\nexport default Github;\n","import React from \"react\";\nimport Twitter from \"./components/Twitter\";\nimport Github from \"./components/Github\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Yosef Lehrer</h1>\n      <h4>Site Under Construction</h4>\n      <Twitter />\n      <Github />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}